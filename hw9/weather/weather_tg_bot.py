import requests
import datetime
from config import tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

button1 = KeyboardButton('Tokyo')
button2 = KeyboardButton('Madrid')
button3 = KeyboardButton('Oslo')
button4 = KeyboardButton('New York')
button5 = KeyboardButton('Sydney')
button6 = KeyboardButton('Mumbai')

markup3 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(button1).add(button2).add(button3).add(button4).add(button5).add(button6)

@dp.message_handler(commands=['more_cities'])
async def process_hi3_command(message: types.Message):
    await message.reply("–£–∑–Ω–∞–π –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö", reply_markup=markup3)

@bot.message_handler(commands=["geo"])
async def geo(message: types.Message):
    button_geo = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True))
    await message.reply("–ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∏ —É–∑–Ω–∞–π –ø–æ–≥–æ–¥—É!", reply_markup=button_geo)

@dp.message_handler(commands=['start'])
async def get_weather_command(message: types.Message):
    await message.reply('–ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!')


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    await message.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/more_cities - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –≤ –≥–æ—Ä–æ–¥–∞—Ö –∏–∑ —Å–ø–∏—Å–∫–∞\n/help - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã')

@dp.message_handler()
async def get_weater(message: types.Message):
    try:
        r = requests.get(f'https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric')
        data = r.json()

        city = data['name']
        cur_weather = data['main']['temp']
        humidity = data['main']['humidity']
        pressure = data['main']['pressure']
        wind = data['wind']['speed']

        await message.reply(f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {cur_weather}C\n–≤–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%\n–¥–∞–≤–ª–µ–Ω–∏–µ {pressure} –º–º. —Ä—Ç. —Å—Ç.\n—Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ {wind} –º/—Å')

    except Exception as ex:
        await message.reply('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞')
    pass


if __name__ == '__main__':
    executor.start_polling(dp)